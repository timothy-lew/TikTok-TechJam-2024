services:
  frontend:
      build:
        context: ./frontnoend
        dockerfile: Dockerfile
        args:
          - NEXT_PUBLIC_BACKEND_URL=http://app:8080
      ports:
        - "3000:3000"
      environment:
        - NEXT_PUBLIC_RUNTIME_BACKEND_URL=http://app:8080
      depends_on:
        - app
      networks:
        - app-network

  app:
    build:
      context: ./backend/backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - mongodb
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://root:secret@mongodb:27017/shopping_platform?authSource=admin
      - WEB3_RPC_URL=http://hardhat:8545
    volumes:
      - ./backend/backend/data-seed:/data
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    environment:
      - MONGO_INITDB_DATABASE=shopping_platform
      - MONGO_INITDB_ROOT_PASSWORD=secret
      - MONGO_INITDB_ROOT_USERNAME=root
    ports:
      - '27017:27017'
    volumes:
      - ./backend/backend/data-seed:/data
    networks:
      - app-network

  mongo-seed:
    image: mongo:latest
    depends_on:
      - mongodb
    volumes:
      - ./backend/backend/data-seed:/data
    command: >
      bash -c '
        set -e;
        echo "Waiting for MongoDB to be ready...";
        until mongosh --host mongodb --port 27017 -u root -p secret --authenticationDatabase admin --eval "print(\"waited for connection\")"; do
          sleep 2;
        done;
        echo "MongoDB is ready.";
  
        echo "Dropping existing database and creating a new one...";
        mongosh --host mongodb --port 27017 -u root -p secret --authenticationDatabase admin --eval "
          use shopping_platform;
          db.dropDatabase();
        "
  
        JSON_FILES=(
          "shopping_platform.buyer_profiles.json"
          "shopping_platform.conversionRate.json"
          "shopping_platform.discountRates.json"
          "shopping_platform.giftCards.json"
          "shopping_platform.items.json"
          "shopping_platform.seller_profiles.json"
          "shopping_platform.transactions.json"
          "shopping_platform.users.json"
          "shopping_platform.wallets.json"
        )
  
        for file in "$${JSON_FILES[@]}"; do
          echo "Importing $$file...";
          collection=$$(echo "$$file" | sed "s/shopping_platform\\.\(.*\)\.json/\\1/");
          mongoimport --host mongodb --port 27017 -u root -p secret \
            --authenticationDatabase admin --db shopping_platform --collection "$$collection" \
            --file /data/"$$file" --jsonArray;
        done;
  
        echo "Import completed.";
      '
    networks:
      - app-network

  hardhat:
    build:
      context: ./backend/smart-contract
      dockerfile: Dockerfile
    ports:
      - "8545:8545"
    volumes:
      - ./backend/smart-contract:/app
      - /app/node_modules
    networks:
      - app-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - app
      - mongodb
      - hardhat
    networks:
      - app-network

networks:
  app-network:
    driver: bridge